% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generalized_binary_segmentation.R
\name{generalized_binary_segmentation}
\alias{generalized_binary_segmentation}
\title{Complete Binary Segmentation}
\usage{
generalized_binary_segmentation(
  data,
  test_statistic_function = compute_Mn,
  cutoff_function = compute_Welch,
  trim_function = function(data) {
     max(10, floor(log(ncol(as.data.frame(data)))),
    na.rm = TRUE)
 },
  final_verify = TRUE,
  silent = FALSE,
  alpha = 0.05,
  ...
)
}
\arguments{
\item{data}{funts object or numeric data.frame with rows for evaluated values and columns
indicating functional observations}

\item{test_statistic_function}{XXXXXXXXXXXXXXXXX.}

\item{cutoff_function}{XXXXXX}

\item{final_verify}{(Optional) Boolean value XXXXXXXXXXXXX

Indicates if a final pass looking at sequences with only one change point
should be conducted to verify results. Note, this may modify existing
locations of change points, potentially to less accurate locations.}

\item{silent}{(Optional) Boolean value

Indicates if useful output should be silenced. Default FALSE shows output.}

\item{alpha}{Numeric value in \eqn{[0, 1]} indicating the significance for
cutoff_function.}

\item{...}{Additional arguments passed into test_statistic_function}
}
\value{
A list of numeric values indicating change points  (if exists),
NA otherwise
}
\description{
This function implements traditional binary segmentation on functional data
for general functions. Change points are recursively found until no
more change points are detected.
}
\examples{
# Below will give NA as the trim cuts too much.
#   change 50 to 20 in trim function to get other results
generalized_binary_segmentation(
  data = electricity[, 1:80],
  test_statistic_function = compute_Mn,
  cutoff_function = welch_approximation,
  trim_function = function(data) {
    max(50, floor(log(ncol(as.data.frame(data)))),
      na.rm = TRUE
    )
  },
  final_verify = FALSE
)
}
