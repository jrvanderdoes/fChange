% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/detect_changepoint.R
\name{detect_changepoint}
\alias{detect_changepoint}
\title{Detect Change Point}
\usage{
detect_changepoint(
  X,
  nSims = 500,
  x = seq(0, 1, length.out = 40),
  h = 3,
  K = bartlett_kernel,
  space = "BM",
  TN_M = 10000,
  Cov_M = 75,
  silent = FALSE
)
}
\arguments{
\item{X}{Numeric data.frame with rows for evaluated values and columns
indicating FD}

\item{nSims}{(Optional) Integer indicating the number of realizations of
Gaussian processes to compute. Default is 100}

\item{x}{(Optional) Vector of locations of observations. Default is equally
spaced observations on (0, 1) with the same number of observations as FDs.}

\item{h}{(Optional) Integer indicating amount of lag to consider. Default is
3.}

\item{K}{(Optional) Function for the kernel function to use. Default is the
barlett_kernel.}

\item{space}{XXXXX}

\item{TN_M}{(Optional) XXXXX}

\item{Cov_M}{(Optional) Integer indicating the number of vectors used to create
each value in the covariance matrix. Default is 25.}

\item{silent}{(Optional) Boolean indicating it the output should be supressed.
Default is FALSE.}
}
\value{
List with three entries:
\enumerate{
\item pval: pvalue based on the data and estimated Gaussian processes
\item gamProcess: Vector of estimated test statistics based on data
\item value: Test statistic for data
}
}
\description{
This method detects changes in the data through simulating the null
distribution. To do so, the covariance matrix is estimated based on the
data, against some noise vectors. After estimation, a sample from the null
distribution can be simulated. The creation of the covariance matrix and
simulating of the null sample is completed many times, estimating the
null distribution. The test statistic is compared to this. This method is
computationally intensive and we found no reason to prefer it over
\code{detect_changepoint_singleCov()}.
}
\examples{
cp_res <- detect_changepoint(
  electricity[, 1:8],
  nSims = 1, x = seq(0, 1, length.out = 5),
  h = 0, K = bartlett_kernel
)
}
