% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/binary_segmentation.R
\name{single_binary_segmentation}
\alias{single_binary_segmentation}
\title{Single Binary Segmentation}
\usage{
single_binary_segmentation(
  data,
  test_statistic_function,
  cutoff_function,
  trim_function,
  alpha = 0.05,
  include_value = FALSE,
  ...
)
}
\arguments{
\item{data}{Numeric data.frame with rows for evaluated values and columns
indicating FD}

\item{test_statistic_function}{Function with the first argument being data
and the second argument optional argument for candidate change points.
Additional arguments passed in via ... . Return a single numeric value.}

\item{cutoff_function}{Function with first argument being data and the second
argument being alpha. No other arguments given. Return single numeric
value.}

\item{trim_function}{Function taking data as an argument and returning a
numeric value indicating how much should be trimmed on each end}

\item{alpha}{Numeric value in \eqn{[0, 1]} indicating the significance for
cutoff_function.}

\item{include_value}{XXXXX}

\item{...}{Additional arguments passed into test_statistic_function}
}
\value{
A numeric value indicating the cutoff location (if exists),
NA otherwise
}
\description{
This function implements traditional binary segmentation on functional data
for general functions. At most one change point is detected.
}
\examples{
\dontrun{
# Setup Data
data_KL <- generate_data_fd(ns = c(200),
    eigsList = list(c(3,2,1,0.5)),
    basesList = list(fda::create.bspline.basis(nbasis=4, norder=4)),
    meansList = c(0),
    distsArray = c('Normal'),
    evals = seq(0,1,0.05),
    kappasArray = c(0))
single_binary_segmentation(data_KL, compute_Tn, welch_approximation,
    function(data){max(2, floor(log(ncol(as.data.frame(data)))),
    na.rm=TRUE)})

# Setup Data
data_KL <- generate_data_fd(ns = c(100,100),
    eigsList = list(c(3,2,1,0.5),
                    c(3,2,1,0.5)),
    basesList = list(fda::create.bspline.basis(nbasis=4, norder=4),
                     fda::create.bspline.basis(nbasis=4, norder=4)),
    meansList = c(-1,1),
    distsArray = c('Normal','Normal'),
    evals = seq(0,1,0.05),
    kappasArray = c(0,0))
single_binary_segmentation(data_KL, compute_Tn, welch_approximation,
    function(data){max(2, floor(log(ncol(as.data.frame(data)))),
    na.rm=TRUE)})
single_binary_segmentation(data_KL, compute_Mn, welch_approximation,
    function(data){max(2, floor(log(ncol(as.data.frame(data)))),
    na.rm=TRUE)})
}
}
