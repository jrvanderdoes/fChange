% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generalized_binary_segmentation.R
\name{generalized_wild_binary_segmentation}
\alias{generalized_wild_binary_segmentation}
\title{Wild Binary Segmentation}
\usage{
generalized_wild_binary_segmentation(
  data,
  M = 5000,
  add_full = TRUE,
  block_size = 1,
  ...
)
}
\arguments{
\item{data}{Numeric data.frame with rows for evaluated values and columns
indicating FD}

\item{M}{Numeric value

Indicates the number of intervals to examine}

\item{add_full}{Boolean value

Indicates if the entire interval should be added}

\item{block_size}{(Optional) Numeric value

Indicates the minimum block size}

\item{...}{Additional parameters to pass into
\code{.single_binary_segmentation}}
}
\value{
Numeric values indicating the change points detected
}
\description{
Wild Binary Segmentation
}
\examples{
\dontrun{
# Setup Data
data_KL <- generate_kl(
  ns = c(12, 12, 12),
  eigsList = list(
    c(3, 2, 1, 0.5),
    c(3, 2, 1, 0.5),
    c(3, 2, 1, 0.5)
  ),
  basesList = list(
    fda::create.bspline.basis(nbasis = 4, norder = 4),
    fda::create.bspline.basis(nbasis = 4, norder = 4),
    fda::create.bspline.basis(nbasis = 4, norder = 4)
  ),
  meansList = c(-1, 0, 1),
  distsArray = c("Normal", "Normal", "Normal"),
  evals = seq(0, 1, 0.05),
  kappasArray = c(0, 0, 0)
)

complete_binary_segmentation(
  data_KL$data, compute_Tn, welch_approximation,
  function(data) {
    max(2, floor(log(ncol(as.data.frame(data)))),
      na.rm = TRUE
    )
  }
)
generalized_wild_binary_segmentation(
  data = data_KL$data,
  test_statistic_function = compute_Tn,
  cutoff_function = welch_approximation,
  trim_function = function(data) {
    max(2, floor(log(ncol(as.data.frame(data)))),
      na.rm = TRUE
    )
  }
)
}
}
