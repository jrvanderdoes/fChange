% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_data_kl.R
\name{generate_kl}
\alias{generate_kl}
\title{Generate functional data}
\usage{
generate_kl(
  ns,
  eigsList,
  basesList,
  meansList,
  distsArray,
  evals,
  kappasArray = c(0),
  burnin = 100,
  silent = FALSE,
  ...
)
}
\arguments{
\item{ns}{A numerical vector of length m

\if{html}{\out{<div class="sourceCode">}}\preformatted{Indicates the number of functional objects (groups) created using first
set of parameters
}\if{html}{\out{</div>}}}

\item{eigsList}{A list of vectors of length $1$ or $m$ with the eigenvalues
for each group}

\item{basesList}{A list of bases (eigenfunctions), length 1 or m

\if{html}{\out{<div class="sourceCode">}}\preformatted{Define the basis using fda on c(0, 1) to ensure it works
(TODO:: Test to see removal of this restriction)
}\if{html}{\out{</div>}}}

\item{meansList}{A list of means, length 1 or m, for each group}

\item{distsArray}{A vector of distributions, length 1 or m, for each group}

\item{evals}{A vector of points indicating the points to evaluate the
functions on}

\item{kappasArray}{A vector of Kappas, length 1 or m, for the strength of the
VAR(1) process}

\item{burnin}{A numeric value indicating the number of burnin trials
This is only necessary when kappa>0}

\item{silent}{A Boolean that toggles running output}

\item{...}{Examples such as dof which is used for t-distribution}
}
\value{
A data.frame of m columns length(evals) rows (TODO:: Verify)
}
\description{
\code{generate_kl} generates functional data via KL expansion.
This can include change points in any combination of the following:
\itemize{
\item Mean
\item Distribution
\item Eigenvalue(s)
\item Eigenvector(s)
}
In this sense, the function creates m 'groups' of discretely observed
functions with similar properties.
}
\examples{
# Create 200 functions with a midway change point. The change point
#     is a change point in the eigenvalues, eigenfunctions, means,
#     distributions, and VAR(1) strength
data_KL <- generate_kl(
  ns = c(25, 25),
  eigsList = list(
    c(3, 2, 1, 0.5),
    c(2, 3, 2)
  ),
  basesList = list(
    fda::create.bspline.basis(nbasis = 4, norder = 4),
    fda::create.fourier.basis(nbasis = 2)
  ),
  meansList = c(0, 0.5),
  distsArray = c("Normal", "Binomial"),
  evals = seq(0, 1, 0.05),
  kappasArray = c(0, 0.5)
)
}
