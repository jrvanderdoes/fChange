% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/detect_changepoint.R
\name{detect_changepoint_singleCov}
\alias{detect_changepoint_singleCov}
\title{Estimate null and detect change point based on a single covariance matrix}
\usage{
detect_changepoint_singleCov(
  X,
  nSims = 2000,
  x = seq(0, 1, length.out = 40),
  h = 3,
  K = bartlett_kernel,
  space = "BM",
  silent = FALSE,
  TN_M = 10000,
  Cov_M = 75
)
}
\arguments{
\item{X}{Numeric data.frame with rows for evaluated values and columns
indicating FD}

\item{nSims}{(Optional) Integer indicating the number of realizations of
Gaussian processes to compute. Default is 100}

\item{x}{(Optional) Vector of locations of observations. Default is equally
spaced observations on (0, 1) with the same number of observations as FDs.}

\item{h}{(Optional) Integer indicating amount of lag to consider. Default is
3.}

\item{K}{(Optional) Function for the kernel function to use. Default is the
barlett_kernel.}

\item{space}{XXXXX}

\item{silent}{(Optional) Boolean indicating it the output should be supressed.
Default is FALSE.}

\item{TN_M}{(Optional) XXXXX}

\item{Cov_M}{(Optional) Integer indicating the number of vectors used to create
each value in the covariance matrix. Default is 25.}
}
\value{
List with three entries:
\enumerate{
\item pval: pvalue based on the data and estimated Gaussian processes
\item gamProcess: Vector of estimated test statistics based on data
\item value: Test statistic for data
}
}
\description{
This method detects changes in the data through simulating the null
distribution. To do so, the covariance matrix is estimated based on the
data, against some noise vectors. After estimation, samples from the null
distribution can be simulated. These samples can be combine to estimate the
null distribution. The test statistic is then compared to this. This method
has been shown to be effective and is far faster than
\code{detect_changepoint()}.
}
\examples{
cp_res <- detect_changepoint_singleCov(
 electricity[,1:20], nSims=100, x=seq(0,1,length.out=5),
 h=0, K=bartlett_kernel, silent=FALSE)
}
