% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/elbow_method.R
\name{elbow_method}
\alias{elbow_method}
\title{Elbow Method}
\usage{
elbow_method(
  data,
  test_statistic_function,
  cutoff_function,
  trim_function,
  alpha = 0.05,
  errorType = "L2",
  ...
)
}
\arguments{
\item{data}{Numeric data.frame with rows for evaluated values and columns
indicating FD}

\item{test_statistic_function}{Function with the first argument being data
and the second argument argument for candidate change points.
Additional arguments passed in via ... . Return a single numeric value.}

\item{cutoff_function}{Function with first argument being data and the second
argument being alpha. No other arguments given. Return single numeric
value.}

\item{trim_function}{Function taking data as an argument and returning a
numeric value indicating how much should be trimmed on each end}

\item{alpha}{Numeric value in \link{0,1} indicating the significance for
cutoff_function.}

\item{errorType}{String of 'L2' or 'Tr' indicating the error function to use}

\item{...}{Additional parameters to pass into the respective functions}
}
\value{
list with element 1 the data frame with the change point location and
element a ggplot of variance as a function of CPs
}
\description{
Method to determine the number of change points using the elbow method. Note,
cascading change points are not considered to allow for every possible
number of change points to be selectable.
}
\examples{
data_KL <- generate_data_fd(ns = c(100,50,100),
                  eigsList = list(c(3,2,1,0.5),
                                  c(3,2,1,0.5),
                                  c(3,2,1,0.5)),
                  basesList = list(
                     fda::create.bspline.basis(nbasis=4, norder=4),
                     fda::create.bspline.basis(nbasis=4, norder=4),
                     fda::create.bspline.basis(nbasis=4, norder=4)),
                  meansList = c(-1,1,-1),
                  distsArray = c('Normal','Normal','Normal'),
                  evals = seq(0,1,0.05),
                  kappasArray = c(0, 0, 0))

results <- elbow_method(data_KL,
                  test_statistic_function=compute_Mn, fn=compute_Mn,
                  cutoff_function = generalized_resampling,
                  trim_function = trim_function,
                  alpha = 0.05, M=1000)
print(results[[2]])
tmp_or <- results[[1]]$CP[1:22]
tmp_or <- results[order(tmp_or)]
plot_fd(data_KL, CPs=tmp_or)
}
