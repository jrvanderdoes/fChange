#
retTib <-
tibble(Subsection = 'Unknown',
Question = displayData$Question,
MeanSD = displayData$MeanSD)
#}
retTib
})
View*tab_data_IR1
View(tab_data_IR1)
tab_data_IR1 <- lapply(1, function(nm) {
#if(nm %in% 1:3){
#  retTib <-
#    tibble(Subsection = 'Attitude About Patient Comfort',
#           Question = displayData$Question,
#          MeanSD = displayData$MeanSD)
#
#} else if(nm %in% (3 + 1:11)){
#  retTib <-
#    tibble(Subsection = 'Clinic Enviroment',
#           Question = displayData$Question,
#           MeanSD = displayData$MeanSD)
#
#} else if(nm %in% (14 + 1:13)){
#  retTib <-
#    tibble(Subsection = 'CARD Attitudes',
#           Question = displayData$Question,
#          MeanSD = displayData$MeanSD)
#
#}else{
#
retTib <-
tibble(Question = displayData$Question,
MeanSD = displayData$MeanSD)
#}
retTib
})
View(tab_data_IR1)
tab_data_IR1 <- do.call(what = rbind, args = tab_data_IR1) %>%
# keep only category names and combine counts and percent
transmute(#`Subsection` = Subsection,
`Question` = Question,
`Mean (SD)` = MeanSD)
tab_data_IR1
tab_data_IR2 <- lapply(1, function(nm) {
total <- sum(displayData1[,c('Resp0','Resp1','Resp2')])
retTib <-
tibble(Question = displayData1$Question,
Less = displayData1$Resp0/total,
Same = displayData1$Resp1/total,
More = displayData1$Resp2/total)
retTib
})
displayData1[displayData1$Resp0>0,]
tab_data_IR1 <- lapply(1, function(nm) {
retTib <-
tibble(Question = displayData$Question,
MeanSD = displayData$MeanSD)
retTib
})
tab_data_IR2 <- lapply(1, function(nm) {
total <- sum(displayData1[,c('Resp0','Resp1','Resp2')])
retTib <-
tibble(Question = displayData1$Question,
Less = displayData1$Resp0,
Same = displayData1$Resp1,
More = displayData1$Resp2)
retTib
})
displayData1
displayData1$Question
displayData1$Resp0
tab_data_IR2 <- lapply(1, function(nm) {
retTib <-
tibble(Question = displayData1$Question,
Less = as.numeric(displayData1$Resp0),
Same = as.numeric(displayData1$Resp1),
More = as.numeric(displayData1$Resp2))
retTib
})
library(readxl)
data_import <- suppressMessages(read_excel("C:/Users/Jeremy/Documents/School/Waterloo/SCCR/Survey/Moses/CARD Vaccinator Survey Data June 2021.xlsx",
col_names = FALSE))
# Get columns
tops <- data_import[1,]
cols <- data_import[2,]
comb <- c()
for(i in 1:ncol(tops)){
if(i>1)
tops[i] <- ifelse(is.na(tops[i]),tops[i-1],tops[i])
comb[i] <- ifelse(is.na(tops[i]),cols[i],paste0(tops[i],'_',cols[i]))[[1]]
}
# Get Data
data_vac <- data_import[-c(1:2),]
data_vac <- data_vac[-c(42:nrow(data_vac)),]
colnames(data_vac) <- comb
###########################################
total <- 41
## Basic Summary - Page 1
displayData <- data.frame('Question'=rep(NA,length(6:32)),'MeanSD'=NA)
for(i in 6:32){
#cat(colnames(data_vac[,i]),'\n')
#tmp <- as.numeric(data_vac[,i][[1]])
#
#cat('-- All --\n')
#cat(paste0(round(mean(tmp,na.rm = T),1),' (',
#           round(sd(tmp,na.rm = T),1),')\n'))
#cat(paste0(sum(table(tmp)),' (',
#           round(sum(table(tmp))/total*100,1),')\n'))
#
#readline('Next..')
tmp <- suppressWarnings(as.numeric(data_vac[,i][[1]]))
displayData[i,] <- c(colnames(data_vac[,i]),
paste0(round(mean(tmp,na.rm = T),1),' (',
round(sd(tmp,na.rm = T),1),')'))
}
displayData <- na.omit(displayData)
## Basic Summary - Page 2
displayData1 <- data.frame('Question'=rep(NA,length(c((32+seq(1,by=5, length.out=15)),
(113+seq(1,by=5, length.out=4))))),
'Resp0'=NA,'Resp1'=NA,'Resp2'=NA)
data_vac[data_vac[,33]==3,33] <- '.'
for(i in c((32+seq(1,by=5, length.out=15)),
(113+seq(1,by=5, length.out=4)))){
#cat(colnames(data_vac[,i]),'\n')
#tmp <- as.numeric(data_vac[,i][[1]])
#
#cat('-- All --\n')
##cat(paste0(round(mean(tmp,na.rm = T),1),' (',
##           round(sd(tmp,na.rm = T),1),')\n'))
##cat(paste0(sum(table(tmp)),' (',
##           round(sum(table(tmp))/total*100,1),')\n'))
##print(table(tmp))
#print(round(table(tmp)/sum(table(tmp))*100,1))
#cat(paste0(sum(table(tmp)),' (',
#           round(sum(table(tmp))/total*100,1),')\n'))
#
#readline('Next...')
tmp_data <- suppressWarnings(as.numeric(data_vac[,i][[1]]))
tmp <- table(tmp_data)
if(length(tmp)<3){
tmp_new <- rep(0,3)
tmp_new[1+as.numeric(names(tmp))] <- as.numeric(tmp)
tmp <- tmp_new
}else if(length(tmp)>3){
stop('Sorry too many. Need to examine data')
}
tmp_tot <- sum(tmp)
displayData1[i,] <- c(colnames(data_vac[,i]),
round(tmp/tmp_tot*100+10^-8,1))
}
displayData1 <- na.omit(displayData1)
View(displayData1)
?group_rows
tab_data_IR2 <- lapply(1, function(nm) {
retTib <-
tibble(Subsection = c(rep('Vaccinator Actions',3),rep('Client Actions',3),
rep('Vaccinator Actions',3),'Client Actions',rep('Vaccinator Actions',3),
'Client Actions','Vaccinator Actions', rep('Client Actions',4)),
Question = displayData1$Question,
Less = as.numeric(displayData1$Resp0),
Same = as.numeric(displayData1$Resp1),
More = as.numeric(displayData1$Resp2))
retTib
})
tab_data_IR2
View(tab_data_IR2)
retTib <-
tibble(Subsection = c(rep('Vaccinator Actions',3),rep('Client Actions',3),
rep('Vaccinator Actions',3),'Client Actions',rep('Vaccinator Actions',3),
'Client Actions','Vaccinator Actions', rep('Client Actions',4)),
Question = displayData1$Question,
Less = as.numeric(displayData1$Resp0),
Same = as.numeric(displayData1$Resp1),
More = as.numeric(displayData1$Resp2))
retTib
retTib[order(retTib$Subsection)]
retTib[order(retTib$Subsection),]
View(retTib[order(retTib$Subsection),])
View(retTib[-order(retTib$Subsection),])
View(retTib[order(retTib$Subsection, decreasing = T),])
########
#
##  Libraries
#
########
library(readxl)
library(tidyverse)
########
#
##  Functions
#
########
#####
##  General
#####
pullAndSetupData <- function(fileLoc){
data <- read_excel(fileLoc)
data <- as.data.frame(data[,1:29])
## Fix Q6-1
data$`Q6-1` <- ifelse(data$`Q6-1`==1,0,1)
data
}
getQuestionDF <- function(data){
# Summarize Questions
qs <- paste0('Q',1:9)
question_df <-as.data.frame(matrix(NA,
ncol=length(qs),
nrow=length(data$ID)))
colnames(question_df) <- qs
for(i in qs){
nData <- data[substr(colnames(data),1,2)==i]
for(j in 1:length(nData[1,])){
nData[,j] <- as.numeric(nData[,j])
}
question_df[,i] <-
countSelected_ms(nData)
}
question_df$Survey <- data$Survey
question_df
}
prepOrdinalData <- function(data){
useData <- data.frame(Survey = rep(NA,length(data$Survey)))
useData$Survey <- as.factor(data[,2])
questions <- c('Q1','Q2','Q3','Q4','Q5','Q6','Q7','Q8','Q9')
for(q in questions){
if(q=='Q1'){
useData$NeedleHurt <- as.factor(data$Q1)
} else if(q=='Q2'){
useData$NeedleFear <- as.factor(data$Q2)
} else if(q=='Q3'){
useData$Dizziness <- as.factor(data$Q3)
} else if(q=='Q4'){
useData$LessPainSel <- countSelected_ms(data[substr(colnames(data),1,2)==q])
} else if(q=='Q5'){
useData$MorePainSel <- countSelected_ms(data[substr(colnames(data),1,2)==q])
} else if(q=='Q6'){
useData$SuggestionSel <- countSelected_ms(data[substr(colnames(data),1,2)==q])
} else if(q=='Q7'){
useData$Vaccine <- data$Q7
useData$Vaccine <- ifelse(is.na(useData$Vaccine),2,useData$Vaccine)
useData$Vaccine <- as.factor(useData$Vaccine)
} else if(q=='Q8'){
useData$Age <- data$Q8
} else if(q=='Q9'){
useData$GenderOneSelections <- NA
useData$GenderMForOther <- NA
for(i in 1:length(useData$Survey)){
useData$GenderOneSelections[i] <-
getOneExact(data[i,c('Q9-1','Q9-2','Q9-3')],
c('M','F','O'))
useData$GenderMForOther[i] <-
getMForO(data[i ,c('Q9-1','Q9-2','Q9-3')],
c('M','F','O'))
}
}
}
useData
}
countSelected_ms <- function(data, all.na = NA){
## This function is to count the number of answers given (multiselect)
#
## Inputs
#   - data: a data.frame with the columns being related to different ms choices
#   - all.na: a value for how to count when no solutions given to any ms
#     - Recommend NA or 0
#     - Only really affect Q7, Q9
## Output
#   - An array with counts
## Prep data just in case
for(i in 1:length(data[1,])){
data[,i] <- as.numeric(data[,i])
}
tmp <- rep(NA,length(data))
for(i in 1:length(data[,1])){
tmp[i] <- ifelse(length(data[i,!is.na(data[i,])])>0,
sum(data[i,!is.na(data[i,])]),
all.na)
}
tmp
}
getOneExact <- function(x, mapCol=NULL){
## This function returns the one value from the columns or NA is mult/none
if(sum(x, na.rm=T)==1){
retVal <- which(!is.na(x))
} else{
retVal <- NA
}
if(!is.null(mapCol) && !is.na(retVal))
retVal <- mapCol[retVal]
retVal
}
getMForO <- function(x, mapCol=NULL, otherOpt = length(x)){
## This function returns the one value from the columns or classifies it in other
if(sum(x, na.rm=T)!=1){
retVal <- otherOpt
} else{
retVal <- which(!is.na(x))
}
if(!is.null(mapCol))
retVal <- mapCol[retVal]
retVal
}
########
#
##  Setup Data
#
########
## TODO: Change here to work for you
data <- pullAndSetupData("C:/Users/Jeremy/Documents/School/Waterloo/SCCR/Survey/data.xlsx")
question_df <- getQuestionDF(data)
data_use <- prepOrdinalData(data)
baseData <- cbind(data_use,
'Q5R1'=as.factor(data$`Q5-1`),
'Q5R2'=as.factor(data$`Q5-2`),
'Q5R3'=as.factor(data$`Q5-3`))
baseData$Male <- ifelse(baseData$GenderOneSelections=='M',1,0)
baseData$Other <- ifelse(baseData$GenderOneSelections=='O',1,0)
baseData$Q5R23 <- ifelse(as.numeric(baseData$Q5R2)+
as.numeric(baseData$Q5R3)-2 >=1,
'1','0')
setwd('C:/Users/Jeremy/Documents/School/Waterloo/Research/RPackages/fChange')
library(devtools)
create_package('C:/Users/Jeremy/Documents/School/Waterloo/Research/RPackages/fChange')
########
#
##  Libraries
#
########
library(readxl)
library(tidyverse)
########
#
##  Functions
#
########
#####
##  General
#####
pullAndSetupData <- function(fileLoc){
data <- read_excel(fileLoc)
data <- as.data.frame(data[,1:29])
## Fix Q6-1
data$`Q6-1` <- ifelse(data$`Q6-1`==1,0,1)
data
}
getQuestionDF <- function(data){
# Summarize Questions
qs <- paste0('Q',1:9)
question_df <-as.data.frame(matrix(NA,
ncol=length(qs),
nrow=length(data$ID)))
colnames(question_df) <- qs
for(i in qs){
nData <- data[substr(colnames(data),1,2)==i]
for(j in 1:length(nData[1,])){
nData[,j] <- as.numeric(nData[,j])
}
question_df[,i] <-
countSelected_ms(nData)
}
question_df$Survey <- data$Survey
question_df
}
prepOrdinalData <- function(data){
useData <- data.frame(Survey = rep(NA,length(data$Survey)))
useData$Survey <- as.factor(data[,2])
questions <- c('Q1','Q2','Q3','Q4','Q5','Q6','Q7','Q8','Q9')
for(q in questions){
if(q=='Q1'){
useData$NeedleHurt <- as.factor(data$Q1)
} else if(q=='Q2'){
useData$NeedleFear <- as.factor(data$Q2)
} else if(q=='Q3'){
useData$Dizziness <- as.factor(data$Q3)
} else if(q=='Q4'){
useData$LessPainSel <- countSelected_ms(data[substr(colnames(data),1,2)==q])
} else if(q=='Q5'){
useData$MorePainSel <- countSelected_ms(data[substr(colnames(data),1,2)==q])
} else if(q=='Q6'){
useData$SuggestionSel <- countSelected_ms(data[substr(colnames(data),1,2)==q])
} else if(q=='Q7'){
useData$Vaccine <- data$Q7
useData$Vaccine <- ifelse(is.na(useData$Vaccine),2,useData$Vaccine)
useData$Vaccine <- as.factor(useData$Vaccine)
} else if(q=='Q8'){
useData$Age <- data$Q8
} else if(q=='Q9'){
useData$GenderOneSelections <- NA
useData$GenderMForOther <- NA
for(i in 1:length(useData$Survey)){
useData$GenderOneSelections[i] <-
getOneExact(data[i,c('Q9-1','Q9-2','Q9-3')],
c('M','F','O'))
useData$GenderMForOther[i] <-
getMForO(data[i ,c('Q9-1','Q9-2','Q9-3')],
c('M','F','O'))
}
}
}
useData
}
countSelected_ms <- function(data, all.na = NA){
## This function is to count the number of answers given (multiselect)
#
## Inputs
#   - data: a data.frame with the columns being related to different ms choices
#   - all.na: a value for how to count when no solutions given to any ms
#     - Recommend NA or 0
#     - Only really affect Q7, Q9
## Output
#   - An array with counts
## Prep data just in case
for(i in 1:length(data[1,])){
data[,i] <- as.numeric(data[,i])
}
tmp <- rep(NA,length(data))
for(i in 1:length(data[,1])){
tmp[i] <- ifelse(length(data[i,!is.na(data[i,])])>0,
sum(data[i,!is.na(data[i,])]),
all.na)
}
tmp
}
getOneExact <- function(x, mapCol=NULL){
## This function returns the one value from the columns or NA is mult/none
if(sum(x, na.rm=T)==1){
retVal <- which(!is.na(x))
} else{
retVal <- NA
}
if(!is.null(mapCol) && !is.na(retVal))
retVal <- mapCol[retVal]
retVal
}
getMForO <- function(x, mapCol=NULL, otherOpt = length(x)){
## This function returns the one value from the columns or classifies it in other
if(sum(x, na.rm=T)!=1){
retVal <- otherOpt
} else{
retVal <- which(!is.na(x))
}
if(!is.null(mapCol))
retVal <- mapCol[retVal]
retVal
}
########
#
##  Setup Data
#
########
## TODO: Change here to work for you
data <- pullAndSetupData("C:/Users/Jeremy/Documents/School/Waterloo/SCCR/Survey/Analysis/UsedCode/data.xlsx")
question_df <- getQuestionDF(data)
data_use <- prepOrdinalData(data)
#####
##    General Data Prep
#####
baseData <- cbind(data_use,
'Q5R1'=as.factor(data$`Q5-1`),
'Q5R2'=as.factor(data$`Q5-2`),
'Q5R3'=as.factor(data$`Q5-3`))
baseData$Male <- ifelse(baseData$GenderOneSelections=='M',1,0)
baseData$Other <- ifelse(baseData$GenderOneSelections=='O',1,0)
baseData$Q5R23 <- ifelse(as.numeric(baseData$Q5R2)+
as.numeric(baseData$Q5R3)-2 >=1,
'1','0')
#####
##    Needle Hurt
#####
# Setup
data_model <- na.omit(baseData[c('NeedleHurt','GenderOneSelections',
'Survey','Vaccine',
'Age','Male', 'Other','Q5R1','Q5R23')])
data_model <- data_model[!is.na(data_model$GenderOneSelections),]
data_model <- data_model[data_model$Vaccine!=2,]
data_model <- data_model[data_model$Age<80,]
X=data_model
# 4 groups, V1S1, V1S2,V2S1, V2S2
data1 <- X[X$Vaccine==0 & X$Survey==1,]
data2 <- X[X$Vaccine==0 & X$Survey==2,]
data3 <- X[X$Vaccine==1 & X$Survey==1,]
data4 <- X[X$Vaccine==1 & X$Survey==2,]
len1 <- nrow(data1)
len2 <- nrow(data2)
len3 <- nrow(data3)
len4 <- nrow(data4)
len1
len2
len3
len4
library(fpp2)
library(astsa)
sarima(lynx,2,0,2)
model.for <- sarima.for(lynx,10,2,0,2)
fma::lynx
fma::lynx[80]
fma::lynx[85]
plot(fma::lynx[86:length(lynx)])
sarima(fma::lynx[86:length(lynx)],0,0,0)
sarima(fma::lynx[86:length(lynx)],0,0,0, P=1,D=0,Q=0, S=5)
sarima(fma::lynx[86:length(lynx)],2,0,2)
sarima.for(fma::lynx[86:length(lynx)],2,0,2)
sarima.for(fma::lynx[86:length(lynx)]10,,2,0,2)
sarima.for(fma::lynx[86:length(lynx)],10,2,0,2)
sarima.for(fma::lynx,10,2,0,2)
sarima.for(fma::lynx,10,2,0,2)
knitr::opts_chunk$set(echo = TRUE)
library(fpp2)
library(astsa)
model.for <- sarima.for(fma::lynx,10,2,0,2)
```{r setup, echo=FALSE}
